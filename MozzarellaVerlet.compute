#pragma kernel PointsMain
#pragma kernel ClearHitEvents
#pragma multi_compile_local __ HIT_EVENTS

#define REAL_EPS 5.960464478e-8

#include "UnityCG.cginc"
Texture2D<float4> _DepthTexture;
Texture2D<float4> _NormalsTexture;
float4x4 _WorldToCamera;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float4x4 _CameraProjection;
float4x4 _ViewProjection;
float _NearClipValue;
float _FarClipValue;

float CopySign(float x, float s) {
    return (s >= 0) ? abs(x) : -abs(x);
}

float3 UnpackNormalOctRectEncode(float2 f) {
    float r = f.r, g = f.g;

    // Solve for {x, y, z} given {r, g}.
    float x = 0.5 + 0.5 * g - abs(r);
    float y = g - x;
    float z = max(1.0 - abs(x) - abs(y), REAL_EPS); // EPS is absolutely crucial for anisotropy

    float3 p = float3(x, y, CopySign(z, r));

    return normalize(p);
}

struct Point {
    float3 position;
    float3 prevPosition;
    float volume;
    float lastHitTime;
};

#if HIT_EVENTS
uint _NumHitEvents;
struct HitEvent {
    float3 position;
    float volume;
};
RWStructuredBuffer<HitEvent> _HitEvents;
#endif

float3 _Gravity;

float _DeltaTime;
float _Viscosity;
float _Friction;
float _AttractionStrength;
uint _NumParticles;

RWStructuredBuffer<Point> _Points;

float hash13(float3 p3) {
	p3 = frac(p3 * .1031);
    p3 += dot(p3, p3.zyx + 31.32);
    return frac((p3.x + p3.y) * p3.z);
}

void ComputePointVelocity(inout Point p) {
    p.position += (p.position - p.prevPosition)*0.99;
    //p.position.y = max(p.position.y,0);
}

void ComputePointGravity(inout Point p) {
    p.position += _Gravity * _DeltaTime * _DeltaTime;
}

float2 WorldPositionToUV(float3 worldPosition) {
    float4 uv = mul(_ViewProjection, float4(worldPosition,1));
    uv = uv/uv.w;
    float2 realuv = float2(uv.xy)*0.5+0.5;
    return realuv;
}

float3 GetScreenNormalAtPosition(float3 worldPosition) {
    float2 realuv = WorldPositionToUV(worldPosition);
    uint width, height;
    _NormalsTexture.GetDimensions(width, height);
    uint2 irealuv = realuv*uint2(width,height);
    return mul(_CameraToWorld, float4(UnpackNormalOctRectEncode(_NormalsTexture[irealuv].xy).xyz,0)).xyz;
}


float GetScreenDepthAtPosition(float3 worldPosition, float defaultDistance) {
    // Need the full view projection matrix to figure out where the point lays in texture space.
    // World position -> [0,1) camera space
    float4 uv = mul(_ViewProjection, float4(worldPosition,1));
    uv = uv/uv.w;
    float2 realuv = float2(uv.xy)*0.5+0.5;
    if (realuv.x < 0 || realuv.y < 0 || realuv.y > 1 || realuv.x > 1) {
        return defaultDistance;
    }

    // This is how I correct for depth buffer ray distortion, there's probably a more efficent way
    float4 viewVector = mul(_CameraInverseProjection, float4(uv.xy, 0, -1));
    float3 rayLength = mul(_CameraToWorld, float4(viewVector.xyz,0)).xyz;
    // Of course, textures in compute shaders don't take normalized uvs, so we need the screen size...
    uint width, height;
    _DepthTexture.GetDimensions(width, height);
    uint2 irealuv = realuv*uint2(width,height);
    float nonlin_depth = _DepthTexture[irealuv].r;

    // the start and end clipping plane have fucked up depth data, so we try to ignore it.
    if (nonlin_depth == 0 || nonlin_depth == 1) {
        return defaultDistance;
    }
    float centerDepth = LinearEyeDepth(nonlin_depth) * length(rayLength);
    return centerDepth;
}

/*void DepthCollide(inout Point p, uint3 id) {
    float screenDist = GetScreenDepthAtPosition(p.position,10000000);
    float3 camWS = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
    float3 dir = p.position-camWS;
    float pDistance = length(dir);
    float depthThickness = 0.5f;
    if (pDistance-screenDist < depthThickness && pDistance > screenDist) {
        float3 camForward = mul(_CameraToWorld, float4(0,0,1,0)).xyz;
        float3 camUp = mul(_CameraToWorld, float4(0,1,0,0)).xyz;
        float3 ndir = normalize(dir);
        float3 newPos = (ndir*screenDist)+camWS; 

        float3 normal = GetScreenNormalAtPosition(p.position);
        float scalarProject = dot(normal, newPos-p.position);
        float3 project = normal*scalarProject;
        newPos = project+p.position;

        // Bounce a little
        p.prevPosition = lerp(newPos, p.prevPosition, _Bounciness);
        p.position = newPos;

        #if HIT_EVENTS
        // Register a hit event
        uint hitID = hash13(newPos)*(_NumHitEvents-1);
        _HitEvents[hitID].position = newPos;
        _HitEvents[hitID].volume = p.volume;
        #endif
    }
}*/

void ComputeAttraction(inout Point a, Point b) {
    float3 diff = b.position-a.position;
    float dist = length(diff);

    if (dist > 0) {
        float factor = _AttractionStrength/dist;
        float positionChange = factor*_DeltaTime*_AttractionStrength;
        float adjust = (a.volume*b.volume);
        float maxMovement = min(positionChange*(adjust*adjust), dist*0.5);
        a.position += normalize(diff)*maxMovement;
    }
    
    // Adjust volume by distance
    float shrinkGrowSpeed = 1.0-_Viscosity;
    float newVolume = a.volume-dist*shrinkGrowSpeed;
    a.volume = lerp(a.volume, saturate(newVolume), saturate(sign(b.volume)));
}

[numthreads(64,1,1)]
void PointsMain (uint3 id : SV_DispatchThreadID) {
    if (_Points[id.x].volume == 0) {
        return;
    }
    float3 savedPosition = _Points[id.x].position;
    ComputePointVelocity(_Points[id.x]);
    _Points[id.x].prevPosition = savedPosition;
    ComputeAttraction(_Points[id.x], _Points[(id.x+1)%(_NumParticles)]);
    ComputeAttraction(_Points[id.x], _Points[(id.x-1+_NumParticles)%(_NumParticles)]);
    ComputePointGravity(_Points[id.x]);

    // DepthCollide
    float screenDist = GetScreenDepthAtPosition(_Points[id.x].position,10000000);
    float3 camWS = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
    float3 dir = _Points[id.x].position-camWS;
    float pDistance = length(dir);
    float depthThickness = 0.5f;
    if (pDistance-screenDist < depthThickness && pDistance > screenDist) {
        float3 camForward = mul(_CameraToWorld, float4(0,0,1,0)).xyz;
        float3 camUp = mul(_CameraToWorld, float4(0,1,0,0)).xyz;
        float3 ndir = normalize(dir);
        float3 newPos = (ndir*screenDist)+camWS; 

        float3 normal = GetScreenNormalAtPosition(_Points[id.x].position);
        float scalarProject = dot(normal, newPos-_Points[id.x].position);
        float3 project = normal*scalarProject;
        newPos = project+_Points[id.x].position;

        // friction
        _Points[id.x].prevPosition = lerp(_Points[id.x].prevPosition, newPos, _Friction);
        _Points[id.x].position = newPos;

        #if HIT_EVENTS
        // Register a hit event
        if (_Time[0]-_Points[id.x].lastHitTime > 0.5) {
            uint hitID = hash13(newPos)*(_NumHitEvents-1);
            _HitEvents[hitID].position = newPos;
            _HitEvents[hitID].volume = _Points[id.x].volume;
            _Points[id.x].lastHitTime = _Time[0]+id.x*(1.0/_NumParticles);
        }
        #endif
    }
}

[numthreads(64,1,1)]
void ClearHitEvents (uint3 id : SV_DispatchThreadID) {
    #if HIT_EVENTS
    _HitEvents[id.x].volume = 0;
    #endif
}